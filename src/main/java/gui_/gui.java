package gui_;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.swing.JTextArea;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.SwingUtilities;


import javax.swing.JTextField;
import Tools.*;
import WatchSer.watchservice;
import Algorithms.*;
import DB.MySql;

import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.InputMethodListener;
import java.awt.event.InputMethodEvent;
import javax.swing.JCheckBox;
import javax.swing.event.ChangeListener;
import javax.swing.event.ChangeEvent;
import javax.swing.JTextPane;

/**
 *
 * @author shiran&Yonatan
 */

///https://billwaa.wordpress.com/2011/11/14/java-gui-console-output/ for console

public class gui extends javax.swing.JFrame {

	 public static Read data = new Read();
	 public static String read_comb_path="C:\\Users\\Yoni\\git\\matala-shiran-yonatan-\\Data\\input\\comb";
	 comb_reader data2 = new comb_reader();
	
    /**
     * Creates new form GUI
     * @throws IOException 
     */
	
	
    public gui() throws IOException {
    	
    	
    	
    	
        initComponents();
        data.comb_adder(read_comb_path);
        data.wifiPoints.sort(data.com);
   		data.wifiPoints.sort(data.com2);
        String num_of_wifi=Integer.toString(data.wifiNetworks.size());
        int temp=0;
        for(int i=0;i<data.wifiNetworks.size();i++) {
        	temp+=data.wifiNetworks.get(i).NumberOWN;
        }
        String num_of_mac=Integer.toString(data.wifiNetworks.size()*temp);
        textArea.setText("Number of WifiNetworks:"+"    "  + num_of_wifi
        		+"  " +"Number of Macs:"+"  "+num_of_mac);
      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     * 
     * 
     */
    
    
    
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    public void initComponents() throws IOException {
    	
    	
    	

        jLabel1 = new javax.swing.JLabel();
        input_wigelwifi = new java.awt.TextField();
        input_cumb = new java.awt.TextField();
        CB_FILTER_LOC = new java.awt.Checkbox();
//        CB_FILTER_LOC.addItemListener(new ItemListener() {
//        	public void itemStateChanged(ItemEvent arg0) {
//        		filter_by_loc=true;
//        	}
//        });
        CB_FILTER_LOC.addMouseListener(new MouseAdapter() {
        	@Override
        	public void mousePressed(MouseEvent arg0) {
        		filter_by_loc=true;
        	}
        	@Override
        	public void mouseReleased(MouseEvent e) {
        		filter_by_loc=false;
        	}
        });
        CB_TIME_FILTER = new java.awt.Checkbox();
        CB_TIME_FILTER.addMouseListener(new MouseAdapter() {
        	@SuppressWarnings("deprecation")
			@Override
        	public void mousePressed(MouseEvent e) {
        		 from_time =Time1.getText();
        		 to_time =Time2.getText();
        		 try {
					from_time1 =format.parse(from_time);
					to_time1 =format.parse(to_time);
				} catch (ParseException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
        		 
        		filter_by_time=true;
        		
        	}
        	@Override
        	public void mouseReleased(MouseEvent e) {
        		filter_by_time=false;
        	}
        });
        Lat1 = new java.awt.TextField();
        lon1 = new java.awt.TextField();
        alt1 = new java.awt.TextField();
        Remove_all = new javax.swing.JButton();
        Save_cumb = new javax.swing.JButton();
        Save_kml = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        Lat2 = new java.awt.TextField();
        lon2 = new java.awt.TextField();
        alt2 = new java.awt.TextField();
       
        CB_DEVICE = new java.awt.Checkbox();
        CB_DEVICE.addMouseListener(new MouseAdapter() {
        	@Override
        	public void mousePressed(MouseEvent e) {
        		//CB_DEVICE.setState(true);
        		 device_filter = filter_dev.getText();
        		filter_by_device=true;
        	}
        	@Override
        	public void mouseReleased(MouseEvent e) {
        		CB_DEVICE.setState(false);
        		filter_by_device=false;
        	}
        });
        filter_dev = new java.awt.TextField();
        Before_filter = new javax.swing.JToggleButton();
        Save_filter = new javax.swing.JButton();
        Time1 = new javax.swing.JTextField();
        Time2 = new javax.swing.JTextField();
        ONE_MAC_ALGO1 = new javax.swing.JTextField();
       
        O_ALGO1 = new javax.swing.JButton();
        STR_ALGO2 = new javax.swing.JTextField();
        mac1 = new javax.swing.JTextField();
        rssi1 = new javax.swing.JTextField();
        mac2 = new javax.swing.JTextField();
        rssi2 = new javax.swing.JTextField();
        mac3 = new javax.swing.JTextField();
        rssi3 = new javax.swing.JTextField();
        algo2_macs = new javax.swing.JButton();
        str_algo2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Matala Shiran&Yonatan");

        input_wigelwifi.setText("Input wigelwifi");
        input_wigelwifi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textField1ActionPerformed(evt);
            }
        });

        input_cumb.setText("Input comb ");
        input_cumb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textField2ActionPerformed(evt);
            }
        });

        CB_FILTER_LOC.setLabel("By this location");

        CB_TIME_FILTER.setLabel("By this time");

        Lat1.setText("Lat");
        Lat1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	from_lat = Double.parseDouble(Lat1.getText());
                textField4ActionPerformed(evt);
            }
        });

        lon1.setText("Lon");
        lon1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	from_lon = Double.parseDouble(lon1.getText());
                textField5ActionPerformed(evt);
            }
        });

        alt1.setText("Alt");
        alt1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	from_alt = Double.parseDouble(alt1.getText());
                textField6ActionPerformed(evt);
            }
        });

        Remove_all.setText("Remove all ");
        Remove_all.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
               data.wifiNetworks.clear();
               data2.KMLpoints.clear();
                try {
					Tools.Writer write_remove= new Writer();
				} catch (FileNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
                String num_of_wifi=Integer.toString(data.wifiNetworks.size());
                int temp=0;
                for(int i=0;i<data.wifiNetworks.size();i++) {
                	temp+=data.wifiNetworks.get(i).NumberOWN;
                }
                String num_of_mac=Integer.toString(data.wifiNetworks.size()*temp);
                textArea.setText("Number of WifiNetworks:"+"    "  + num_of_wifi
                		+"  " +"Number of Macs:"+"  "+num_of_mac);	
            }
        });
       

        Save_cumb.setText("Save comb ");
        Save_cumb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	 String num_of_wifi=Integer.toString(data.wifiNetworks.size());
                 int temp=0;
                 for(int i=0;i<data.wifiNetworks.size();i++) {
                 	temp+=data.wifiNetworks.get(i).NumberOWN;
                 }
                 String num_of_mac=Integer.toString(data.wifiNetworks.size()*temp);
            	try {
            		data.wifiPoints.sort(data.com);
			   		data.wifiPoints.sort(data.com2);
					Writer write = new Writer(data);
					 
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
                jButton4ActionPerformed(evt);
                textArea.setText("Number of WifiNetworks:"+"    "  + num_of_wifi
                		+"  " +"Number of Macs:"+"  "+num_of_mac);
            }
        });

        Save_kml.setText("Save KML ");
        Save_kml.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	try {
					WriterToKml write_to_kml = new WriterToKml(data);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
                jButton5ActionPerformed(evt);
                
            }
        });

        jLabel5.setText("To");

        jLabel6.setText("To");

        jLabel7.setText("To");

        jLabel8.setText("To");

        Lat2.setText("Lat");
        Lat2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	to_lat = Double.parseDouble(Lat2.getText());
                textField8ActionPerformed(evt);
            }
        });

        lon2.setText("Lon");
        lon2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	to_lon = Double.parseDouble(lon2.getText());
                textField9ActionPerformed(evt);
            }
        });

        alt2.setText("Alt");
        alt2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	to_alt = Double.parseDouble(alt2.getText());
                textField10ActionPerformed(evt);
            }
        });

        CB_DEVICE.setLabel("By this device");

        filter_dev.setText("Device");
        filter_dev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	
                textField11ActionPerformed(evt);
                device_filter = filter_dev.getText();
            }
        });

        Before_filter.setSelected(true);
        Before_filter.setText("Before filter");
        Before_filter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	String path=("C:\\Users\\Yoni\\git\\matala-shiran-yonatan-\\Data\\output\\Filter\\backup");
            	 comb_reader backup = new comb_reader(path);
            	data2.KMLpoints.clear();
            	data.wifiNetworks.clear();
            	data.comb_adder(path);
            	 data.wifiPoints.sort(data.com);
            		data.wifiPoints.sort(data.com2);
                jToggleButton1ActionPerformed(evt);
                Before_filter.setSelected(false);
                String num_of_wifi=Integer.toString(data.wifiNetworks.size());
                int temp=0;
                for(int i=0;i<data.wifiNetworks.size();i++) {
                	temp+=data.wifiNetworks.get(i).NumberOWN;
                }
                String num_of_mac=Integer.toString(data.wifiNetworks.size()*temp);
                textArea.setText("Number of WifiNetworks:"+"    "  + num_of_wifi
                		+"  " +"Number of Macs:"+"  "+num_of_mac);	
            }
        });

        Save_filter.setText("Save this filter");
        Save_filter.setToolTipText("");
        Save_filter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
                try {
					Tools.Filter.save_filter();
				} catch (FileNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
                
            }
        });

        Time1.setText("Time");
        Time1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	
            	
                jTextField2ActionPerformed(evt);
                from_time =Time1.getText();
                
            }
        });

        Time2.setText("Time");
        Time2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
                to_time =Time2.getText();
            }
        });

        ONE_MAC_ALGO1.addInputMethodListener(new InputMethodListener() {
        	public void caretPositionChanged(InputMethodEvent arg0) {
        	}
        	public void inputMethodTextChanged(InputMethodEvent arg0) {
        		mac = ONE_MAC_ALGO1.getText();
        	}
        });
        
        ONE_MAC_ALGO1.setText(" One mac only");
        ONE_MAC_ALGO1.addActionListener(new java.awt.event.ActionListener() {
        	
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	
                jTextField1ActionPerformed(evt);
            }
        });

        O_ALGO1.setText("Algo 1");
        O_ALGO1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	mac = ONE_MAC_ALGO1.getText();
            	try {
					Algo1 calc = new Algo1(loc.MAC_locs,mac);
				} catch (FileNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
                jButton7ActionPerformed(evt);
                
            }
        });

        STR_ALGO2.setText("str for algo 2");
        STR_ALGO2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });

        mac1.setText("Mac 1");
        mac1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });

        rssi1.setText("Rssi1");
        rssi1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField6ActionPerformed(evt);
            }
        });

        mac2.setText("Mac 2");
        mac2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField7ActionPerformed(evt);
            }
        });

        rssi2.setText("Rssi 2");
        rssi2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField8ActionPerformed(evt);
            }
        });

        mac3.setText("Mac 3");
        mac3.setToolTipText("");
        mac3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField9ActionPerformed(evt);
            }
        });

        rssi3.setText("Rssi 3");
        rssi3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField10ActionPerformed(evt);
            }
        });

        algo2_macs.setText("Algo 2 ");
        algo2_macs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	mac_algo2=mac1.getText();
            	mac2_algo2=mac2.getText();
            	mac3_algo2=mac3.getText();
            	RSSI1 = Integer.parseInt(rssi1.getText());
            	RSSI2 = Integer.parseInt(rssi2.getText());
            	RSSI3 = Integer.parseInt(rssi3.getText());
            	try {
					Algo2 calc = new Algo2(data2,mac_algo2,mac2_algo2,mac3_algo2,RSSI1,RSSI2,RSSI3);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
                jButton8ActionPerformed(evt);
            }
        });

        str_algo2.setText("Algo 2 ");
        str_algo2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	stralg2=STR_ALGO2.getText();
            	try {
					Algo2 calc2 =new Algo2(data2,stralg2);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
                jButton9ActionPerformed(evt);
            }
          
        });
        
        textArea = new JTextArea();
       
        JTextArea textArea_1 = new JTextArea();
        JButton LOAD_FILTER = new JButton();
        LOAD_FILTER.addMouseListener(new MouseAdapter() {
        	@Override
        	public void mouseClicked(MouseEvent arg0) {
        		
        		try {
					Tools.Filter.load_filter();
					
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
        		String load_filter = "Device: "+Filter.getLoad_id()+" "+ "From time: "+Filter.getLoad_from_time()+" "+"To time: "+Filter.getLoad_to_time()+" "+"From lat: "+Filter.getLoad_from_lat()+" "+"To lat: "+Filter.getLoad_to_lat()+" "+"From lon: " + Filter.getLoad_from_lon()+" "+"To lon: "+Filter.getLoad_to_lon()+" "+"From alt: "+Filter.getLoad_from_alt()+" "+"To alt: "+Filter.getLoad_to_alt();
                textArea_1.setText(load_filter);
        	}
        });
        LOAD_FILTER.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        	}
        });
        LOAD_FILTER.setToolTipText("");
        LOAD_FILTER.setText("load filter");
        
        JButton btnAddWiglewifi = new JButton("Add wiglewifi");
        btnAddWiglewifi.addMouseListener(new MouseAdapter() {
        	@Override
        	public void mouseClicked(MouseEvent arg0) {
        		wiglewifi_path= input_wigelwifi.getText();
        		try {
					data.add_wigle(wiglewifi_path);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
        		 data.wifiPoints.sort(data.com);
        	   		data.wifiPoints.sort(data.com2);
        		String num_of_wifi=Integer.toString(data.wifiNetworks.size());
                int temp=0;
                for(int i=0;i<data.wifiNetworks.size();i++) {
                	temp+=data.wifiNetworks.get(i).NumberOWN;
                }
                String num_of_mac=Integer.toString(data.wifiNetworks.size()*temp);
                textArea.setText("Number of WifiNetworks:"+"    "  + num_of_wifi
                		+"  " +"Number of Macs:"+"  "+num_of_mac);	
        	}
        	
        });
        
        JButton btnAddComb = new JButton("Add comb");
        btnAddComb.addMouseListener(new MouseAdapter() {
        	@Override
        	public void mouseClicked(MouseEvent arg0) {
        	comb_path = input_cumb.getText();
        	data.comb_adder(comb_path);
        	 data.wifiPoints.sort(data.com);
        		data.wifiPoints.sort(data.com2);
        	String num_of_wifi=Integer.toString(data.wifiNetworks.size());
            int temp=0;
            for(int i=0;i<data.wifiNetworks.size();i++) {
            	temp+=data.wifiNetworks.get(i).NumberOWN;
            }
            String num_of_mac=Integer.toString(data.wifiNetworks.size()*temp);
            textArea.setText("Number of WifiNetworks:"+"    "  + num_of_wifi
            		+"  " +"Number of Macs:"+"  "+num_of_mac);	
        	}
        });
        
        btnFilter = new JButton("Filter!");
        btnFilter.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent arg0) {
        	}
        });
        btnFilter.addMouseListener(new MouseAdapter() {
        	@Override
        	public void mouseClicked(MouseEvent arg0) {
        		String path=("C:\\Users\\Yoni\\git\\matala-shiran-yonatan-\\Data\\output\\Filter\\backup\\backup.csv");
        		 try {
					Writer backup =new Writer(data,path);
				} catch (IOException e2) {
					// TODO Auto-generated catch block
					e2.printStackTrace();
				}
        		if(CB_DEVICE.getState()||chckbxOrByThis.isSelected())
        			Filter.remove_by_id(data, device_filter);
        		if(chckbxByLontitude.isSelected()&&CB_FILTER_LOC.getState()||chckbxOrThisLocation.isSelected())
        			Filter.remove_by_lat(data, from_lat,to_lat);
        		
        		if(filter_by_lon&&CB_FILTER_LOC.getState()||chckbxOrThisLocation.isSelected())
        			Filter.remove_by_lon(data, from_lon,to_lon);
        		if(filter_by_alt&&CB_FILTER_LOC.getState()||chckbxOrThisLocation.isSelected())
        			Filter.remove_by_alt(data, from_alt,to_alt);
        		if(CB_TIME_FILTER.getState()||chckbxOrByThis_1.isSelected()) {
					try {
						Filter.remove_by_time(data, from_time1,to_time1);
					} catch (ParseException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
        		}
        		if(chckbxNotByThis_1.isSelected())
        			Filter.leave_by_id(data, device_filter);
        		if(chckbxNotByThis.isSelected()) {
        		if(filter_by_lat)
        			Filter.leave_by_lat(data, from_lat,to_lat);
        		if(filter_by_lon)
        			Filter.leave_by_lon(data, from_lon,to_lon);
        		if(filter_by_alt)
        			Filter.leave_by_alt(data, from_alt,to_alt);
        		}
        		if(chckbxNotByThis_2.isSelected()) {
					try {
						Filter.leave_by_time(data, from_time1,to_time1);
					} catch (ParseException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}}
        		
        		String num_of_wifi=Integer.toString(data.wifiNetworks.size());
                int temp=0;
                for(int i=0;i<data.wifiNetworks.size();i++) {
                	temp+=data.wifiNetworks.get(i).NumberOWN;
                }
                String num_of_mac=Integer.toString(data.wifiNetworks.size()*temp);
                textArea.setText("Number of WifiNetworks:"+"    "  + num_of_wifi
                		+"  " +"Number of Macs:"+"  "+num_of_mac);	
        	}
        });
        
        
//        String load_filter = "Device: "+Filter.getLoad_id()+" "+ "from time: "+Filter.getLoad_from_time()+" "+"to time: "+Filter.getLoad_to_time()+" "+"from lat: "+Filter.getLoad_from_lat()+" "+"to lat"+Filter.getLoad_to_lat()+" "+"from lon:" + Filter.getLoad_from_lon()+" "+"to lon"+Filter.getLoad_to_lon()+" "+"from alt: "+Filter.getLoad_from_alt()+" "+"to alt: "+Filter.getLoad_to_alt();
//        textArea_1.setText(load_filter);
        
       
        chckbxByLontitude.addChangeListener(new ChangeListener() {
        	public void stateChanged(ChangeEvent e) {
        		if(chckbxByLontitude.isSelected()) {
        		from_lat = Double.parseDouble(Lat1.getText());
        		to_lat = Double.parseDouble(Lat2.getText());
        		filter_by_lat=true;
        	}}
        });
        
        
        JCheckBox chckbxByLontitude_1 = new JCheckBox("By Lontitude");
        chckbxByLontitude_1.addChangeListener(new ChangeListener() {
        	public void stateChanged(ChangeEvent e) {
        		if(chckbxByLontitude_1.isSelected()) {
        		from_lon = Double.parseDouble(lon1.getText());
        		to_lon = Double.parseDouble(lon2.getText());
        		filter_by_lon=true;
        	}}
        });
        
        
        JCheckBox chckbxNewCheckBox = new JCheckBox("By altitude");
        chckbxNewCheckBox.addChangeListener(new ChangeListener() {
        	public void stateChanged(ChangeEvent e) {
        		if(chckbxNewCheckBox.isSelected()) {
        			from_alt = Double.parseDouble(lon1.getText());
            		to_alt = Double.parseDouble(lon2.getText());
            		filter_by_alt=true;
        		}
        	}
        });
        
        
        chckbxNotByThis = new JCheckBox("Not by this location");
        chckbxNotByThis.addChangeListener(new ChangeListener() {
        	public void stateChanged(ChangeEvent e) {
        		if(chckbxNotByThis.isSelected())
        			not_by_loc= true;
        	}
        });
        
        
        chckbxOrThisLocation = new JCheckBox("Or this location");
        chckbxOrThisLocation.addChangeListener(new ChangeListener() {
        	public void stateChanged(ChangeEvent e) {
        		if(chckbxOrThisLocation.isSelected())
        		or_by_loc= true;
        	}
        });
       
        
        chckbxNotByThis_1 = new JCheckBox("Not by this device");
        chckbxNotByThis_1.addChangeListener(new ChangeListener() {
        	public void stateChanged(ChangeEvent e) {
        		if(chckbxNotByThis_1.isSelected())
        		device_filter = filter_dev.getText();
        	}
        });
       
        
        
        chckbxOrByThis = new JCheckBox("Or by this device");
        chckbxOrByThis.addChangeListener(new ChangeListener() {
        	public void stateChanged(ChangeEvent e) {
        		if(chckbxOrByThis.isSelected()){
        		device_filter = filter_dev.getText();
        		or_by_device= true;
        		}
        	}
        });
       
       
        
        
        chckbxNotByThis_2 = new JCheckBox("Not by this time");
        chckbxNotByThis_2.addChangeListener(new ChangeListener() {
        	public void stateChanged(ChangeEvent arg0) {
        		if(chckbxNotByThis_2.isSelected()) {
        		 from_time =Time1.getText();
        		 to_time =Time2.getText();
        		 try {
 					from_time1 =format.parse(Time1.getText());
 					to_time1 =format.parse(Time2.getText());
 				} catch (ParseException e1) {
 					// TODO Auto-generated catch block
 					e1.printStackTrace();
        	}}}
        });
        
        
        chckbxOrByThis_1 = new JCheckBox("Or by this time");
        chckbxOrByThis_1.addChangeListener(new ChangeListener() {
        	public void stateChanged(ChangeEvent e) {
        		if(chckbxOrByThis_1.isSelected()) {
        		 from_time =Time1.getText();
        		 to_time =Time2.getText();
        		 try {
					from_time1 =format.parse(Time1.getText());
					to_time1 =format.parse(Time2.getText());
				} catch (ParseException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
					
        		or_by_time= true;
        		}
        	}
        });
       
        
        JTextPane txtpnDateFormatDdmmdyy = new JTextPane();
        txtpnDateFormatDdmmdyy.setText("Date format: dd-MM-yy hh:mm");
        
        txtpnExp = new JTextPane();
        txtpnExp.setText("EXMP: Lenovo PB2-690Y");
        
        txtUser = new JTextField();
        txtUser.setText("User");
        txtUser.setColumns(10);
        
        txtPassword = new JTextField();
        txtPassword.setText("Password");
        txtPassword.setColumns(10);
        
        txtIp = new JTextField();
        txtIp.setText("IP");
        txtIp.setColumns(10);
        
        txtPort = new JTextField();
        txtPort.setText("Port");
        txtPort.setColumns(10);
        
        txtDb = new JTextField();
        txtDb.setText("DB");
        txtDb.setColumns(10);
        
        txtTable = new JTextField();
        txtTable.setText("Table");
        txtTable.setColumns(10);
        
        
        btnConnect.addMouseListener(new MouseAdapter() {
        	@Override
        	public void mouseClicked(MouseEvent arg0) {
        		countClick=1;
        		MySql.getTable(data, txtDb.getText()+"://"+txtIp.getText()+":"+txtPort.getText()+"/"+txtTable.getText(), txtUser.getText(), txtPassword.getText());
        	//MySql.getTable(data,"jdbc:mysql://5.29.193.52:3306/oop_course_ariel","oop1","Lambda1();");
        		
        	}
        });
        
      
        
        

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createSequentialGroup()
        					.addGap(20)
        					.addComponent(jLabel1, GroupLayout.PREFERRED_SIZE, 185, GroupLayout.PREFERRED_SIZE))
        				.addGroup(layout.createSequentialGroup()
        					.addGap(20)
        					.addComponent(Before_filter, GroupLayout.PREFERRED_SIZE, 301, GroupLayout.PREFERRED_SIZE))
        				.addGroup(layout.createSequentialGroup()
        					.addContainerGap(30, Short.MAX_VALUE)
        					.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        						.addGroup(layout.createSequentialGroup()
        							.addGroup(layout.createParallelGroup(Alignment.LEADING)
        								.addComponent(input_wigelwifi, GroupLayout.PREFERRED_SIZE, 169, GroupLayout.PREFERRED_SIZE)
        								.addComponent(input_cumb, GroupLayout.PREFERRED_SIZE, 167, GroupLayout.PREFERRED_SIZE))
        							.addPreferredGap(ComponentPlacement.UNRELATED)
        							.addGroup(layout.createParallelGroup(Alignment.LEADING)
        								.addComponent(btnAddWiglewifi)
        								.addComponent(btnAddComb)))
        						.addComponent(chckbxOrThisLocation))
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        						.addGroup(layout.createParallelGroup(Alignment.LEADING, false)
        							.addGroup(layout.createSequentialGroup()
        								.addComponent(ONE_MAC_ALGO1, GroupLayout.PREFERRED_SIZE, 93, GroupLayout.PREFERRED_SIZE)
        								.addPreferredGap(ComponentPlacement.RELATED)
        								.addComponent(O_ALGO1)
        								.addGap(430)
        								.addComponent(Save_cumb)
        								.addPreferredGap(ComponentPlacement.RELATED)
        								.addComponent(Save_kml)
        								.addPreferredGap(ComponentPlacement.RELATED)
        								.addComponent(Remove_all))
        							.addGroup(layout.createSequentialGroup()
        								.addComponent(STR_ALGO2, GroupLayout.PREFERRED_SIZE, 199, GroupLayout.PREFERRED_SIZE)
        								.addPreferredGap(ComponentPlacement.RELATED)
        								.addComponent(str_algo2))
        							.addGroup(layout.createSequentialGroup()
        								.addGap(16)
        								.addComponent(mac1, GroupLayout.PREFERRED_SIZE, 51, GroupLayout.PREFERRED_SIZE)
        								.addPreferredGap(ComponentPlacement.RELATED)
        								.addComponent(rssi1, GroupLayout.PREFERRED_SIZE, 41, GroupLayout.PREFERRED_SIZE)
        								.addPreferredGap(ComponentPlacement.RELATED)
        								.addComponent(mac2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        								.addPreferredGap(ComponentPlacement.RELATED)
        								.addComponent(rssi2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        								.addPreferredGap(ComponentPlacement.RELATED)
        								.addComponent(mac3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        								.addPreferredGap(ComponentPlacement.RELATED)
        								.addComponent(rssi3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        								.addPreferredGap(ComponentPlacement.RELATED)
        								.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        									.addGroup(layout.createSequentialGroup()
        										.addComponent(algo2_macs)
        										.addPreferredGap(ComponentPlacement.RELATED, 519, Short.MAX_VALUE))
        									.addGroup(layout.createSequentialGroup()
        										.addComponent(chckbxOrByThis)
        										.addPreferredGap(ComponentPlacement.UNRELATED)
        										.addComponent(chckbxNotByThis_1)
        										.addGap(165)))))
        						.addGroup(layout.createSequentialGroup()
        							.addGroup(layout.createParallelGroup(Alignment.TRAILING, false)
        								.addGroup(layout.createSequentialGroup()
        									.addGroup(layout.createParallelGroup(Alignment.TRAILING, false)
        										.addComponent(alt1, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        										.addComponent(lon1, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
        										.addComponent(Lat1, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        									.addPreferredGap(ComponentPlacement.RELATED)
        									.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        										.addGroup(layout.createSequentialGroup()
        											.addComponent(jLabel8)
        											.addPreferredGap(ComponentPlacement.RELATED)
        											.addComponent(alt2, GroupLayout.PREFERRED_SIZE, 65, GroupLayout.PREFERRED_SIZE))
        										.addGroup(layout.createParallelGroup(Alignment.LEADING, false)
        											.addGroup(layout.createSequentialGroup()
        												.addComponent(jLabel7)
        												.addPreferredGap(ComponentPlacement.RELATED)
        												.addComponent(lon2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        											.addGroup(layout.createSequentialGroup()
        												.addComponent(jLabel6)
        												.addPreferredGap(ComponentPlacement.RELATED)
        												.addComponent(Lat2, GroupLayout.PREFERRED_SIZE, 65, GroupLayout.PREFERRED_SIZE)))))
        								.addGroup(layout.createSequentialGroup()
        									.addComponent(chckbxNotByThis)
        									.addGap(22)))
        							.addGroup(layout.createParallelGroup(Alignment.LEADING)
        								.addGroup(layout.createSequentialGroup()
        									.addGap(23)
        									.addGroup(layout.createParallelGroup(Alignment.LEADING)
        										.addComponent(chckbxByLontitude)
        										.addComponent(chckbxByLontitude_1)
        										.addComponent(chckbxNewCheckBox)))
        								.addComponent(CB_FILTER_LOC, GroupLayout.PREFERRED_SIZE, 106, GroupLayout.PREFERRED_SIZE))
        							.addPreferredGap(ComponentPlacement.RELATED, 226, Short.MAX_VALUE)
        							.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        								.addGroup(layout.createSequentialGroup()
        									.addComponent(filter_dev, GroupLayout.PREFERRED_SIZE, 326, GroupLayout.PREFERRED_SIZE)
        									.addGap(56))
        								.addGroup(layout.createSequentialGroup()
        									.addComponent(txtpnExp, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        									.addGap(154))
        								.addGroup(layout.createSequentialGroup()
        									.addComponent(CB_DEVICE, GroupLayout.PREFERRED_SIZE, 133, GroupLayout.PREFERRED_SIZE)
        									.addGap(15))))))
        				.addGroup(layout.createSequentialGroup()
        					.addGap(204)
        					.addGroup(layout.createParallelGroup(Alignment.LEADING)
        						.addComponent(textArea_1, GroupLayout.DEFAULT_SIZE, 452, Short.MAX_VALUE)
        						.addComponent(textArea, GroupLayout.DEFAULT_SIZE, 452, Short.MAX_VALUE))
        					.addGap(54)
        					.addComponent(textArea1, GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE)
        					.addPreferredGap(ComponentPlacement.RELATED)))
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createSequentialGroup()
        					.addGap(134)
        					.addGroup(layout.createParallelGroup(Alignment.LEADING)
        						.addComponent(txtpnDateFormatDdmmdyy, GroupLayout.PREFERRED_SIZE, 195, GroupLayout.PREFERRED_SIZE)
        						.addGroup(layout.createSequentialGroup()
        							.addGroup(layout.createParallelGroup(Alignment.LEADING)
        								.addComponent(txtUser, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        								.addComponent(txtPassword, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        								.addComponent(txtIp, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        								.addComponent(txtPort, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        							.addGap(26)
        							.addGroup(layout.createParallelGroup(Alignment.LEADING)
        								.addComponent(btnConnect)
        								.addComponent(txtTable, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        								.addComponent(txtDb, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))))
        					.addGap(336))
        				.addGroup(Alignment.TRAILING, layout.createSequentialGroup()
        					.addGap(53)
        					.addGroup(layout.createParallelGroup(Alignment.LEADING)
        						.addGroup(layout.createSequentialGroup()
        							.addComponent(chckbxOrByThis_1)
        							.addGap(12)
        							.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        								.addComponent(Time2, GroupLayout.PREFERRED_SIZE, 142, GroupLayout.PREFERRED_SIZE)
        								.addGroup(layout.createSequentialGroup()
        									.addComponent(CB_TIME_FILTER, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        									.addGap(22)
        									.addComponent(chckbxNotByThis_2)))
        							.addGap(37))
        						.addGroup(layout.createSequentialGroup()
        							.addComponent(Time1, GroupLayout.PREFERRED_SIZE, 148, GroupLayout.PREFERRED_SIZE)
        							.addPreferredGap(ComponentPlacement.RELATED, 142, Short.MAX_VALUE)
        							.addComponent(jLabel5, GroupLayout.PREFERRED_SIZE, 23, GroupLayout.PREFERRED_SIZE)
        							.addGap(77)))
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addGroup(layout.createParallelGroup(Alignment.LEADING)
        						.addComponent(Save_filter)
        						.addComponent(btnFilter)
        						.addComponent(LOAD_FILTER, GroupLayout.PREFERRED_SIZE, 115, GroupLayout.PREFERRED_SIZE))
        					.addGap(219))))
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(layout.createParallelGroup(Alignment.LEADING, false)
        				.addGroup(layout.createSequentialGroup()
        					.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        						.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        							.addComponent(Remove_all)
        							.addComponent(Save_cumb)
        							.addComponent(Save_kml)
        							.addComponent(ONE_MAC_ALGO1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        							.addComponent(O_ALGO1)
        							.addComponent(btnAddWiglewifi))
        						.addGroup(layout.createSequentialGroup()
        							.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        								.addComponent(jLabel1, GroupLayout.PREFERRED_SIZE, 24, GroupLayout.PREFERRED_SIZE)
        								.addComponent(txtUser, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        								.addComponent(txtDb, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        							.addPreferredGap(ComponentPlacement.RELATED)
        							.addGroup(layout.createParallelGroup(Alignment.LEADING)
        								.addComponent(input_wigelwifi, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        								.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        									.addComponent(txtPassword, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        									.addComponent(txtTable, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))))
        					.addGroup(layout.createParallelGroup(Alignment.LEADING)
        						.addGroup(layout.createSequentialGroup()
        							.addGroup(layout.createParallelGroup(Alignment.LEADING)
        								.addGroup(layout.createSequentialGroup()
        									.addGap(11)
        									.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        										.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        											.addComponent(STR_ALGO2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        											.addComponent(str_algo2)
        											.addComponent(btnAddComb))
        										.addComponent(input_cumb, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
        								.addGroup(layout.createSequentialGroup()
        									.addPreferredGap(ComponentPlacement.RELATED)
        									.addComponent(txtIp, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
        							.addPreferredGap(ComponentPlacement.RELATED)
        							.addComponent(txtPort, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        						.addGroup(layout.createSequentialGroup()
        							.addPreferredGap(ComponentPlacement.UNRELATED)
        							.addComponent(btnConnect))))
        				.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        					.addComponent(mac1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        					.addComponent(rssi1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        					.addComponent(mac2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        					.addComponent(rssi2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        					.addComponent(mac3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        					.addComponent(rssi3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        					.addComponent(algo2_macs)))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        				.addGroup(layout.createSequentialGroup()
        					.addComponent(Before_filter)
        					.addGap(10)
        					.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        						.addGroup(layout.createParallelGroup(Alignment.LEADING)
        							.addComponent(Lat1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        							.addComponent(Lat2, Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        						.addComponent(jLabel6)
        						.addComponent(chckbxByLontitude))
        					.addGap(8)
        					.addGroup(layout.createParallelGroup(Alignment.LEADING)
        						.addGroup(layout.createSequentialGroup()
        							.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        								.addComponent(lon1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        								.addComponent(jLabel7)
        								.addComponent(lon2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        								.addComponent(chckbxByLontitude_1))
        							.addGap(10)
        							.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        								.addComponent(alt1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        								.addComponent(jLabel8)
        								.addGroup(layout.createSequentialGroup()
        									.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        										.addComponent(chckbxNewCheckBox)
        										.addComponent(alt2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        									.addGap(1))))
        						.addGroup(layout.createSequentialGroup()
        							.addGap(12)
        							.addComponent(txtpnExp, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        							.addPreferredGap(ComponentPlacement.RELATED)
        							.addComponent(filter_dev, GroupLayout.PREFERRED_SIZE, 20, GroupLayout.PREFERRED_SIZE)))
        					.addGap(8)
        					.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        						.addComponent(CB_FILTER_LOC, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        						.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        							.addComponent(chckbxNotByThis)
        							.addComponent(chckbxOrThisLocation))
        						.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        							.addComponent(chckbxOrByThis)
        							.addComponent(chckbxNotByThis_1))
        						.addComponent(CB_DEVICE, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        					.addGap(0))
        				.addGroup(layout.createSequentialGroup()
        					.addComponent(txtpnDateFormatDdmmdyy, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(jLabel5, GroupLayout.PREFERRED_SIZE, 20, GroupLayout.PREFERRED_SIZE)
        						.addComponent(Time1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        						.addComponent(Time2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        						.addComponent(btnFilter))
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addGroup(layout.createParallelGroup(Alignment.LEADING)
        						.addComponent(chckbxNotByThis_2)
        						.addComponent(CB_TIME_FILTER, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        						.addComponent(chckbxOrByThis_1))))
        			.addGap(44)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE, false)
        				.addGroup(layout.createSequentialGroup()
        					.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        						.addGroup(layout.createSequentialGroup()
        							.addComponent(Save_filter, GroupLayout.PREFERRED_SIZE, 23, GroupLayout.PREFERRED_SIZE)
        							.addGap(19)
        							.addComponent(LOAD_FILTER))
        						.addComponent(textArea1, GroupLayout.PREFERRED_SIZE, 151, GroupLayout.PREFERRED_SIZE))
        					.addGap(161))
        				.addGroup(layout.createSequentialGroup()
        					.addComponent(textArea, GroupLayout.PREFERRED_SIZE, 65, GroupLayout.PREFERRED_SIZE)
        					.addGap(31)
        					.addComponent(textArea_1, GroupLayout.PREFERRED_SIZE, 55, GroupLayout.PREFERRED_SIZE)
        					.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        getContentPane().setLayout(layout);
        CB_DEVICE.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>                        

    private void textField1ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:

        
    }                                          

    private void textField6ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    }                                          

    private void textField10ActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           
 
    private void textField2ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    }                                          

    private void textField9ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    }                                          

    private void textField11ActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private void jTextField9ActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private void jTextField6ActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private void jTextField7ActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private void jTextField10ActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
    }                                            

    private void jTextField8ActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    }                                        

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // TODO add your handling code here:
    }                                              

    private void textField4ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    }                                          

    private void textField8ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    }                                          

    private void textField5ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    }                                          

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    }                                        

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    }                                        

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    }                                        

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    }                                        

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    }                                        

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    }                                        

    /**
     * @param args the command line arguments
     * @throws IOException 
     */
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
watchservice watchMe = new watchservice();
		
		Thread thread = new Thread(watchMe);
		thread.start();
		
		
		redirectSystemStreams();
       	
		
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
					new gui().setVisible(true);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });
       
    }

    // Variables declaration - do not modify 
 

    
    private java.awt.Checkbox CB_FILTER_LOC;
    private java.awt.Checkbox CB_TIME_FILTER;
    private java.awt.Checkbox CB_DEVICE;
    private javax.swing.JButton Remove_all;
    private javax.swing.JButton Save_cumb;
    private javax.swing.JButton Save_kml;
    private javax.swing.JButton Save_filter;
    private javax.swing.JButton O_ALGO1;
    private javax.swing.JButton algo2_macs;
    private javax.swing.JButton str_algo2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JTextField ONE_MAC_ALGO1;
    private javax.swing.JTextField rssi3;
    private javax.swing.JTextField Time1;
    private javax.swing.JTextField Time2;
    private javax.swing.JTextField STR_ALGO2;
    private javax.swing.JTextField mac1;
    private javax.swing.JTextField rssi1;
    private javax.swing.JTextField mac2;
    private javax.swing.JTextField rssi2;
    private javax.swing.JTextField mac3;
    private javax.swing.JToggleButton Before_filter;
    private java.awt.TextField input_wigelwifi;
    private java.awt.TextField alt2;
    private java.awt.TextField filter_dev;
    private java.awt.TextField input_cumb;
    private java.awt.TextField Lat1;
    private java.awt.TextField lon1;
    private java.awt.TextField alt1;
    private java.awt.TextField Lat2;
    private java.awt.TextField lon2;
    private static JTextArea textArea;
    
    String mac="";
    String stralg2= "";
    String wiglewifi_path="";
    String comb_path="";
    wigel_mac loc = new wigel_mac();
    String mac_algo2,mac2_algo2,mac3_algo2;
    int RSSI1, RSSI2, RSSI3;
    private JButton btnFilter;
    public static String device_filter="",from_time="",to_time="";
    static Date from_time1,to_time1;
    DateFormat format = new SimpleDateFormat("dd-MM-yy hh:mm");
    double from_lat,to_lat,from_lon,to_lon,from_alt,to_alt;
    boolean filter_by_loc= false, filter_by_time=false, filter_by_device=false,not_by_time=false,or_by_time=false,not_by_loc=false,or_by_loc=false,not_by_device=false,or_by_device=false;
    boolean filter_by_lat=false,filter_by_lon=false,filter_by_alt=false;
    private JCheckBox chckbxNotByThis;
    private JCheckBox chckbxOrThisLocation;
    private JCheckBox chckbxNotByThis_1;
    private JCheckBox chckbxOrByThis;
    private JCheckBox chckbxNotByThis_2;
    private JCheckBox chckbxOrByThis_1;
    private JTextPane txtpnExp;
    public static int countClick=0;
    public static JButton btnConnect = new JButton("Connect and add Table");
    JCheckBox chckbxByLontitude = new JCheckBox("By Latitude");
    JCheckBox chckbxByLontitude_1;
    JCheckBox chckbxNewCheckBox;
    private JTextField txtUser;
    private JTextField txtPassword;
    private JTextField txtIp;
    private JTextField txtPort;
    private JTextField txtDb;
    private JTextField txtTable;
    public static JTextArea textArea1 = new JTextArea();
    private static void updateTextArea(final String text) {
        SwingUtilities.invokeLater(new Runnable() {
          public void run() {
        	  textArea1.append(text);
          }
        });
      }
     
    //Followings are The Methods that do the Redirect, you can simply Ignore them. 
      private static void redirectSystemStreams() {
        OutputStream out = new OutputStream() {
          @Override
          public void write(int b) throws IOException {
            updateTextArea(String.valueOf((char) b));
          }
     
          @Override
          public void write(byte[] b, int off, int len) throws IOException {
            updateTextArea(new String(b, off, len));
          }
     
          @Override
          public void write(byte[] b) throws IOException {
            write(b, 0, b.length);
          }
        };
     
        System.setOut(new PrintStream(out, true));
        System.setErr(new PrintStream(out, true));
      }
}
